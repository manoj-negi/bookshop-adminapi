// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: offers.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOffer = `-- name: CreateOffer :one
INSERT INTO offers (
    book_id,
    discount_percentage,
    start_date,
    end_date
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id
`

type CreateOfferParams struct {
	BookID             int32       `json:"book_id"`
	DiscountPercentage pgtype.Text `json:"discount_percentage"`
	StartDate          pgtype.Date `json:"start_date"`
	EndDate            pgtype.Date `json:"end_date"`
}

func (q *Queries) CreateOffer(ctx context.Context, arg CreateOfferParams) (int32, error) {
	row := q.db.QueryRow(ctx, createOffer,
		arg.BookID,
		arg.DiscountPercentage,
		arg.StartDate,
		arg.EndDate,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteOffer = `-- name: DeleteOffer :one
DELETE FROM offers WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteOffer(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteOffer, id)
	err := row.Scan(&id)
	return id, err
}

const getAllOffers = `-- name: GetAllOffers :many
SELECT id, book_id, discount_percentage, start_date, end_date, is_deleted, created_at, updated_at FROM offers
`

func (q *Queries) GetAllOffers(ctx context.Context) ([]Offer, error) {
	rows, err := q.db.Query(ctx, getAllOffers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Offer{}
	for rows.Next() {
		var i Offer
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.DiscountPercentage,
			&i.StartDate,
			&i.EndDate,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOffer = `-- name: GetOffer :one
SELECT id, book_id, discount_percentage, start_date, end_date, is_deleted, created_at, updated_at FROM offers WHERE id = $1
`

func (q *Queries) GetOffer(ctx context.Context, id int32) (Offer, error) {
	row := q.db.QueryRow(ctx, getOffer, id)
	var i Offer
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.DiscountPercentage,
		&i.StartDate,
		&i.EndDate,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOffer = `-- name: UpdateOffer :one
UPDATE offers
SET
    book_id = $2,
    discount_percentage = $3,
    start_date = $4,
    end_date = $5
WHERE id = $1
RETURNING id
`

type UpdateOfferParams struct {
	ID                 int32       `json:"id"`
	BookID             int32       `json:"book_id"`
	DiscountPercentage pgtype.Text `json:"discount_percentage"`
	StartDate          pgtype.Date `json:"start_date"`
	EndDate            pgtype.Date `json:"end_date"`
}

func (q *Queries) UpdateOffer(ctx context.Context, arg UpdateOfferParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateOffer,
		arg.ID,
		arg.BookID,
		arg.DiscountPercentage,
		arg.StartDate,
		arg.EndDate,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
