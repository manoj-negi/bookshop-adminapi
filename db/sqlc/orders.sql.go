// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: orders.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    book_id,
    user_id,
    order_no,
    quantity,
    total_price,
    status
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
) RETURNING id
`

type CreateOrderParams struct {
	BookID     int32       `json:"book_id"`
	UserID     int32       `json:"user_id"`
	OrderNo    pgtype.Text `json:"order_no"`
	Quantity   int32       `json:"quantity"`
	TotalPrice int32       `json:"total_price"`
	Status     StatusEnum  `json:"status"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (int32, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.BookID,
		arg.UserID,
		arg.OrderNo,
		arg.Quantity,
		arg.TotalPrice,
		arg.Status,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteOrder = `-- name: DeleteOrder :one
DELETE FROM orders WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteOrder(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteOrder, id)
	err := row.Scan(&id)
	return id, err
}

const getAllOrders = `-- name: GetAllOrders :many
SELECT id, book_id, user_id, order_no, quantity, total_price, status, is_deleted, created_at, updated_at FROM orders
`

func (q *Queries) GetAllOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.Query(ctx, getAllOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.UserID,
			&i.OrderNo,
			&i.Quantity,
			&i.TotalPrice,
			&i.Status,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrder = `-- name: GetOrder :one
SELECT id, book_id, user_id, order_no, quantity, total_price, status, is_deleted, created_at, updated_at FROM orders WHERE id = $1
`

func (q *Queries) GetOrder(ctx context.Context, id int32) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.UserID,
		&i.OrderNo,
		&i.Quantity,
		&i.TotalPrice,
		&i.Status,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET
    book_id = $2,
    user_id = $3,
    order_no = $4,
    quantity = $5,
    total_price = $6,
    status = $7
WHERE id = $1
RETURNING id
`

type UpdateOrderParams struct {
	ID         int32       `json:"id"`
	BookID     int32       `json:"book_id"`
	UserID     int32       `json:"user_id"`
	OrderNo    pgtype.Text `json:"order_no"`
	Quantity   int32       `json:"quantity"`
	TotalPrice int32       `json:"total_price"`
	Status     StatusEnum  `json:"status"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateOrder,
		arg.ID,
		arg.BookID,
		arg.UserID,
		arg.OrderNo,
		arg.Quantity,
		arg.TotalPrice,
		arg.Status,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
