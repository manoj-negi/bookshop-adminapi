// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: categories.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
    name,
    is_special
) VALUES (
    $1,
    $2
) RETURNING id
`

type CreateCategoryParams struct {
	Name      string      `json:"name"`
	IsSpecial pgtype.Text `json:"is_special"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (int32, error) {
	row := q.db.QueryRow(ctx, createCategory, arg.Name, arg.IsSpecial)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteCategory = `-- name: DeleteCategory :one
DELETE FROM categories WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteCategory(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteCategory, id)
	err := row.Scan(&id)
	return id, err
}

const getAllCategories = `-- name: GetAllCategories :many
SELECT id, name, is_special, is_deleted, created_at, updated_at FROM categories
`

func (q *Queries) GetAllCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, getAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IsSpecial,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategory = `-- name: GetCategory :one
SELECT id, name, is_special, is_deleted, created_at, updated_at FROM categories WHERE id = $1
`

func (q *Queries) GetCategory(ctx context.Context, id int32) (Category, error) {
	row := q.db.QueryRow(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsSpecial,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET
    name = $2,
    is_special = $3
WHERE id = $1
RETURNING id
`

type UpdateCategoryParams struct {
	ID        int32       `json:"id"`
	Name      string      `json:"name"`
	IsSpecial pgtype.Text `json:"is_special"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateCategory, arg.ID, arg.Name, arg.IsSpecial)
	var id int32
	err := row.Scan(&id)
	return id, err
}
