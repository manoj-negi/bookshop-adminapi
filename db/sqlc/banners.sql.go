// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: banners.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBanner = `-- name: CreateBanner :one
INSERT INTO banners (
    name,
    image,
    start_date,
    end_date,
    offer_id
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING id
`

type CreateBannerParams struct {
	Name      string      `json:"name"`
	Image     pgtype.Text `json:"image"`
	StartDate pgtype.Date `json:"start_date"`
	EndDate   pgtype.Date `json:"end_date"`
	OfferID   int32       `json:"offer_id"`
}

func (q *Queries) CreateBanner(ctx context.Context, arg CreateBannerParams) (int32, error) {
	row := q.db.QueryRow(ctx, createBanner,
		arg.Name,
		arg.Image,
		arg.StartDate,
		arg.EndDate,
		arg.OfferID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteBanner = `-- name: DeleteBanner :one
DELETE FROM banners WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteBanner(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteBanner, id)
	err := row.Scan(&id)
	return id, err
}

const getAllBanners = `-- name: GetAllBanners :many
SELECT id, name, image, start_date, end_date, offer_id, is_deleted, created_at, updated_at FROM banners
`

func (q *Queries) GetAllBanners(ctx context.Context) ([]Banner, error) {
	rows, err := q.db.Query(ctx, getAllBanners)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Banner{}
	for rows.Next() {
		var i Banner
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Image,
			&i.StartDate,
			&i.EndDate,
			&i.OfferID,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBanner = `-- name: GetBanner :one
SELECT id, name, image, start_date, end_date, offer_id, is_deleted, created_at, updated_at FROM banners WHERE id = $1
`

func (q *Queries) GetBanner(ctx context.Context, id int32) (Banner, error) {
	row := q.db.QueryRow(ctx, getBanner, id)
	var i Banner
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.StartDate,
		&i.EndDate,
		&i.OfferID,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateBanner = `-- name: UpdateBanner :one
UPDATE banners
SET
    name = $2,
    image = $3,
    start_date = $4,
    end_date = $5,
    offer_id = $6
WHERE id = $1
RETURNING id
`

type UpdateBannerParams struct {
	ID        int32       `json:"id"`
	Name      string      `json:"name"`
	Image     pgtype.Text `json:"image"`
	StartDate pgtype.Date `json:"start_date"`
	EndDate   pgtype.Date `json:"end_date"`
	OfferID   int32       `json:"offer_id"`
}

func (q *Queries) UpdateBanner(ctx context.Context, arg UpdateBannerParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateBanner,
		arg.ID,
		arg.Name,
		arg.Image,
		arg.StartDate,
		arg.EndDate,
		arg.OfferID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
