// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: permissions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPermission = `-- name: CreatePermission :one
INSERT INTO permissions (
    name,
    permission,
    is_deleted
) VALUES (
    $1,
    $2,
    $3
) RETURNING id, name, permission, is_deleted, created_at, updated_at
`

type CreatePermissionParams struct {
	Name       string      `json:"name"`
	Permission pgtype.Text `json:"permission"`
	IsDeleted  pgtype.Bool `json:"is_deleted"`
}

func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) (Permission, error) {
	row := q.db.QueryRow(ctx, createPermission, arg.Name, arg.Permission, arg.IsDeleted)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Permission,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePermission = `-- name: DeletePermission :one
DELETE FROM permissions WHERE id = $1
RETURNING id, name, permission, is_deleted, created_at, updated_at
`

func (q *Queries) DeletePermission(ctx context.Context, id int32) (Permission, error) {
	row := q.db.QueryRow(ctx, deletePermission, id)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Permission,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllPermissions = `-- name: GetAllPermissions :many
SELECT id, name, permission, is_deleted, created_at, updated_at FROM permissions
`

func (q *Queries) GetAllPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.Query(ctx, getAllPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permission{}
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Permission,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermission = `-- name: GetPermission :one
SELECT id, name, permission, is_deleted, created_at, updated_at FROM permissions WHERE id = $1
`

func (q *Queries) GetPermission(ctx context.Context, id int32) (Permission, error) {
	row := q.db.QueryRow(ctx, getPermission, id)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Permission,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePermission = `-- name: UpdatePermission :one
UPDATE permissions
SET
    name = $2,
    permission = $3,
    is_deleted = $4
WHERE id = $1
RETURNING id, name, permission, is_deleted, created_at, updated_at
`

type UpdatePermissionParams struct {
	ID         int32       `json:"id"`
	Name       string      `json:"name"`
	Permission pgtype.Text `json:"permission"`
	IsDeleted  pgtype.Bool `json:"is_deleted"`
}

func (q *Queries) UpdatePermission(ctx context.Context, arg UpdatePermissionParams) (Permission, error) {
	row := q.db.QueryRow(ctx, updatePermission,
		arg.ID,
		arg.Name,
		arg.Permission,
		arg.IsDeleted,
	)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Permission,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
