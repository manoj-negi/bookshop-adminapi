// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: books.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (
    title,
    author_id,
    publication_date,
    price,
    stock_quantity
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING id
`

type CreateBookParams struct {
	Title           string      `json:"title"`
	AuthorID        int32       `json:"author_id"`
	PublicationDate pgtype.Date `json:"publication_date"`
	Price           int32       `json:"price"`
	StockQuantity   int32       `json:"stock_quantity"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (int32, error) {
	row := q.db.QueryRow(ctx, createBook,
		arg.Title,
		arg.AuthorID,
		arg.PublicationDate,
		arg.Price,
		arg.StockQuantity,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteBook = `-- name: DeleteBook :one
DELETE FROM books WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteBook(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteBook, id)
	err := row.Scan(&id)
	return id, err
}

const getAllBooks = `-- name: GetAllBooks :many
SELECT id, title, author_id, publication_date, price, stock_quantity, is_deleted, created_at, updated_at FROM books
`

func (q *Queries) GetAllBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.Query(ctx, getAllBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.AuthorID,
			&i.PublicationDate,
			&i.Price,
			&i.StockQuantity,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBook = `-- name: GetBook :one
SELECT id, title, author_id, publication_date, price, stock_quantity, is_deleted, created_at, updated_at FROM books WHERE id = $1
`

func (q *Queries) GetBook(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRow(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.AuthorID,
		&i.PublicationDate,
		&i.Price,
		&i.StockQuantity,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateBook = `-- name: UpdateBook :one
UPDATE books
SET
    title = $2,
    author_id = $3,
    publication_date = $4,
    price = $5,
    stock_quantity = $6
WHERE id = $1
RETURNING id
`

type UpdateBookParams struct {
	ID              int32       `json:"id"`
	Title           string      `json:"title"`
	AuthorID        int32       `json:"author_id"`
	PublicationDate pgtype.Date `json:"publication_date"`
	Price           int32       `json:"price"`
	StockQuantity   int32       `json:"stock_quantity"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateBook,
		arg.ID,
		arg.Title,
		arg.AuthorID,
		arg.PublicationDate,
		arg.Price,
		arg.StockQuantity,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
